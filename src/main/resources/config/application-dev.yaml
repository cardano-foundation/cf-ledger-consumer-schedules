# Infrastructure domain
multi-datasource: #specified for HikariDataSource
  datasourceLedgerSync:
    hikariConfig:
      jdbcUrl: jdbc:postgresql://${LEDGER_SYNC_HOST:10.4.10.112}:${LEDGER_SYNC_PORT:54321}/${LEDGER_SYNC_DB:explorer_api}?currentSchema=${LEDGER_SYNC_SCHEMA:preprod}
      username: ${LEDGER_SYNC_USER:cardano-read}
      password: ${LEDGER_SYNC_PASSWORD:1}
      driverClassName: org.postgresql.Driver
      poolName: explorer-schedule-ledgersync-pool
      minimumIdle: 1 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximumPoolSize: ${MAXIMUM_POOL_SIZE:48} #maximum pool size
      idleTimeout: 300000 #maximum idle time for connection
      maxLifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connectionTimeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      autoCommit: false #default auto-commit behavior.
      connectionInitSql: SELECT 1
      dataSourceProperties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
    flyway:
      enabled: ${LEDGER_SYNC_FLYWAY_ENABLE:false}
      group: false
      sqlMigrationPrefix: V
      sqlMigrationSeparator: __
      sqlMigrationSuffixes: .sql
      locations: db/migration/ledgersync
      defaultSchema: ${LEDGER_SYNC_SCHEMA}
      schemas: ${LEDGER_SYNC_SCHEMA}
      validateOnMigrate: false
      outOfOrder: true
    schema: ${LEDGER_SYNC_SCHEMA}

  datasourceLedgerSyncAgg:
    hikariConfig:
      jdbcUrl: jdbc:postgresql://${LEDGER_SYNC_AGG_HOST:10.4.10.112}:${LEDGER_SYNC_AGG_PORT:54321}/${LEDGER_SYNC_AGG_DB:explorer_api}?currentSchema=${LEDGER_SYNC_AGG_SCHEMA:preprod}
      username: ${LEDGER_SYNC_AGG_USER:cardano-read}
      password: ${LEDGER_SYNC_AGG_PASSWORD:1}
      driverClassName: org.postgresql.Driver
      poolName: explorer-schedule-ledgersync-agg-pool
      minimumIdle: 1 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximumPoolSize: ${MAXIMUM_POOL_SIZE:48} #maximum pool size
      idleTimeout: 300000 #maximum idle time for connection
      maxLifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connectionTimeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      autoCommit: false #default auto-commit behavior.
      connectionInitSql: SELECT 1
      dataSourceProperties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
    flyway:
      enabled: ${LEDGER_SYNC_AGG_FLYWAY_ENABLE:false}
      group: false
      sqlMigrationPrefix: V
      sqlMigrationSeparator: __
      sqlMigrationSuffixes: .sql
      locations: db/migration/ledgersyncagg
      defaultSchema: ${LEDGER_SYNC_AGG_SCHEMA:preprod}
      schemas: ${LEDGER_SYNC_AGG_SCHEMA:preprod}
      validateOnMigrate: false
      outOfOrder: true
    schema: ${LEDGER_SYNC_AGG_SCHEMA:preprod}

  datasourceExplorer:
    hikariConfig:
      jdbcUrl: jdbc:postgresql://${EXPLORER_HOST:10.4.10.112}:${EXPLORER_PORT:54323}/${EXPLORER_DB:explorer_api}?currentSchema=${EXPLORER_SCHEMA:preprod}
      username: ${EXPLORER_USER:cardano-master}
      password: ${EXPLORER_PASSWORD:Y2FyZGFuby1kYXRhYmFzZS1tYXN0ZXI=}
      driverClassName: org.postgresql.Driver
      poolName: explorer-schedule-explorer-pool
      minimumIdle: 1 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximumPoolSize: ${MAXIMUM_POOL_SIZE:48} #maximum pool size
      idleTimeout: 300000 #maximum idle time for connection
      maxLifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connectionTimeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      autoCommit: false #default auto-commit behavior.
      connectionInitSql: SELECT 1
      dataSourceProperties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
    flyway:
      enabled: ${EXPLORER_FLYWAY_ENABLE:false}
      group: false
      sqlMigrationPrefix: V
      sqlMigrationSeparator: __
      sqlMigrationSuffixes: .sql
      locations: db/migration/explorer
      defaultSchema: ${EXPLORER_SCHEMA}
      schemas: ${EXPLORER_SCHEMA}
      validateOnMigrate: false
      outOfOrder: true
    schema: ${EXPLORER_SCHEMA}

spring:
  # JPA specific configs
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc.batch_size: 1000
        show_sql: false
        format_sql: true
        order_inserts: true
        order_updates: true
    show-sql: false

  task:
    execution:
      pool:
        core-size: 20
        max-size: 20
      thread-name-prefix: Executorxx-
  ## Flyway config
  flyway:
    enabled: false # disable auto FlywayAutoConfiguration

jobs:
  meta-data:
    enabled: ${META_DATA_JOB_ENABLED:false}
  report-history:
    enabled: ${REPORT_HISTORY_JOB_ENABLED:true}
    fixed-delay: ${REPORT_HISTORY_FIXED_DELAY:60000}
    expired:
      rate: ${SET_EXPIRED_REPORTS_DELAY:86400000} # 1 day
  pool-status:
    fixed-delay: ${POOL_STATUS_FIXED_DELAY:300000}
  number-delegator:
    fixed-delay: ${NUMBER_DELEGATOR_FIXED_DELAY:300000}
  unique-account:
    enabled: ${UNIQUE_ACCOUNT_ENABLED:false}
    fixed-delay: ${UNIQUE_ACCOUNT_FIXED_DELAY:300000}
  stake-tx-balance:
    enabled: ${STAKE_TX_BALANCE_JOB_ENABLED:true}
    fixed-delay: ${STAKE_TX_BALANCE_FIXED_DELAY:300000}
  aggregate-pool-info:
    fixed-delay: ${AGGREGATE_POOL_INFO_FIXED_DELAY:10000}
  token-info:
    enabled: ${TOKEN_INFO_JOB_ENABLED:true}
    fixed-delay: ${TOKEN_INFO_FIXED_DELAY:60000}
    num-slot-interval: ${TOKEN_INFO_NUM_SLOT_INTERVAL:8000}
  smart-contract-info:
    fixed-delay: ${SMART_CONTRACT_INFO_FIXED_DELAY:30000}
  native-script-info:
    fixed-delay: ${NATIVE_SCRIPT_INFO_FIXED_DELAY:10000}
  drep-info:
    enabled: ${DREP_INFO_JOB_ENABLED:true}
    fixed-delay: ${DREP_INFO_FIXED_DELAY:30000}
  governance-info:
    enabled: ${GOVERNANCE_INFO_JOB_ENABLED:true}
    fixed-delay: ${GOVERNANCE_INFO_FIXED_DELAY:30000}
  agg-analytic:
    enabled: ${AGG_ANALYTIC_JOB_ENABLED:true}
    number-of-concurrent-tasks: ${AGG_ANALYTIC_NUMBER_OF_CONCURRENT_TASKS:2}
    fixed-delay: ${AGG_ANALYTIC_FIXED_DELAY:300000}
  address-tx-count:
    fixed-delay: ${ADDRESS_TX_COUNT_FIXED_DELAY:300000}
  latest-token-balance:
    fixed-delay: ${LATEST_TOKEN_BALANCE_FIXED_DELAY:300000}
  block-statistics:
    enabled: ${BLOCK_STATISTICS_JOB_ENABLED:false}
    daily-url: ${BLOCK_STATISTICS_DAILY_URL:https://data.blockperf.cardanofoundation.org/daily/daily_agr_cfm.json}
    per-epoch-url: ${BLOCK_STATISTICS_PER_EPOCH_URL:https://data.blockperf.cardanofoundation.org/per_epoch/epoch_agr_cfm.json}
  gov-action-metadata:
    enabled: ${GOV_ACTION_METADATA_JOB_ENABLED:true}
    fixed-delay: ${GOV_ACTION_METADATA_FIXED_DELAY:300000}
    retry-count: ${GOV_ACTION_METADATA_RETRY_COUNT:3}
  install-batch: 100
  limit-content: ${LIMIT_CONTENT_PER_SHEET:1000000}

token:
  metadata:
    url: ${TOKEN_METADATA_URL:https://github.com/cardano-foundation/cardano-token-registry.git}
    folder: ${TOKEN_METADATA_FOLDER:/mappings}
application:
  network: ${NETWORK_NAME:mainnet}
  api:
    check-reward:
      base-url: ${API_CHECK_REWARD_URL:http://10.4.10.231:8888/api/v1/rewards/fetch}
    check-pool-history:
      base-url: ${API_CHECK_POOL_HISTORY_URL:http://10.4.10.231:8888/api/v1/pool-history/fetch}

clouds:
  s3Configs:
    - beanName: reportS3
      profile: minio
      endpoint: ${REPORT_S3_STORAGE_ENDPOINT:http://localhost:9099}
      accessKey: ${REPORT_S3_ACCESS_KEY:minio_access_key}
      secretKey: ${REPORT_S3_SECRET_KEY:minio_secret_key}
      region: ${REPORT_S3_REGION:null}
      bucket: ${REPORT_S3_BUCKET_NAME:cardano-explorer-api-storage-report}
    - beanName: tokenLogosS3
      profile: minio
      endpoint: ${TOKEN_LOGO_S3_STORAGE_ENDPOINT:http://localhost:9099}
      accessKey: ${TOKEN_LOGO_S3_ACCESS_KEY:minio_access_key}
      secretKey: ${TOKEN_LOGO_S3_SECRET_KEY:minio_secret_key}
      region: ${TOKEN_LOGO_S3_REGION:null}
      bucket: ${TOKEN_LOGO_S3_BUCKET_NAME:cardano-explorer-api-storage-native-assets-logos}

logging:
  level:
    org.cardanofoundation: ${LOG:INFO}
    io.netty: ${LOG:INFO}
    reactor.netty: OFF
