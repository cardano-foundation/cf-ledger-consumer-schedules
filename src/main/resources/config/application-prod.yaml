# Infrastructure domain
infrastructure:
  host: ${POSTGRES_HOST:10.4.10.112}
spring:
  # Datasource specific configs
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${infrastructure.host}:${POSTGRES_PORT:54321}/${POSTGRES_DB:explorer}?currentSchema=${spring.jpa.properties.hibernate.default_schema}
    username: ${POSTGRES_USER:cardano_read}
    password: ${POSTGRES_PASSWORD:1}
    driver-class-name: org.postgresql.Driver
    # Hikari specific configs
    hikari:
      pool-name: explorer-schedule-pool
      minimum-idle: 1 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximum-pool-size: ${MAXIMUM_POOL_SIZE:48} #maximum pool size
      idle-timeout: 300000 #maximum idle time for connection
      max-lifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connection-timeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      auto-commit: false #default auto-commit behavior.
      connection-init-sql: SELECT 1
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  # JPA specific configs
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc.batch_size: 1000
        default_schema: ${POSTGRES_SCHEMA:mainnet}
        show_sql: false
        format_sql: true
        order_inserts: true
        order_updates: true
        hbm2ddl:
          auto: none
  task:
    execution:
      pool:
        core-size: 20
        max-size: 20
      thread-name-prefix: Executorxx-
  ## Flyway config
  flyway:
    enabled: ${FLYWAY_ENABLE:true}
    url: ${spring.datasource.url}
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
    group: true
    sql-migration-prefix: V
    sql-migration-separator: __
    sql-migration-suffixes: .sql
    locations: db/migration
    default-schema: ${spring.jpa.properties.hibernate.default_schema}
    schemas: ${spring.jpa.properties.hibernate.default_schema}
    validate-on-migrate: ${FLYWAY_VALIDATE:false}
    out-of-order: true

jobs:
  meta-data:
    enabled: ${META_DATA_JOB_ENABLED:false}
  report-history:
    enabled: ${REPORT_HISTORY_JOB_ENABLED:true}
    expired:
      rate: ${SET_EXPIRED_REPORTS_DELAY:86400000} # 1 day
  pool-offline-data:
    enabled: ${POOL_OFFLINE_DATA_JOB_ENABLED:false}
    fetch:
      delay: ${CRAWL_POOL_DATA_DELAY:172800000}
  top-delegators:
    fixed-delay: ${TOP_DELEGATORS_FIXED_DELAY:300000}
  pool-status:
    fixed-delay: ${POOL_STATUS_FIXED_DELAY:300000}
  number-delegator:
    fixed-delay: ${NUMBER_DELEGATOR_FIXED_DELAY:300000}
  token-page-cache:
    fixed-delay: ${TOKEN_PAGE_CACHE_FIXED_DELAY:200000}
    ttl: ${TOKEN_PAGE_CACHE_TTL:200000}
  unique-account:
    enabled: ${UNIQUE_ACCOUNT_ENABLED:false}
    fixed-delay: ${UNIQUE_ACCOUNT_FIXED_DELAY:300000}
  stake-tx-balance:
    enabled: ${STAKE_TX_BALANCE_JOB_ENABLED:true}
    fixed-delay: ${STAKE_TX_BALANCE_FIXED_DELAY:300000}
  token-info:
    enabled: ${TOKEN_INFO_JOB_ENABLED:true}
    fixed-delay: ${TOKEN_INFO_FIXED_DELAY:60000}
  install-batch: 100
  limit-content: ${LIMIT_CONTENT_PER_SHEET:1000000}

token:
  metadata:
    url: ${TOKEN_METADATA_URL:https://github.com/cardano-foundation/cardano-token-registry.git}
    folder: ${TOKEN_METADATA_FOLDER:/mappings}
application:
  network: ${NETWORK_NAME:mainnet}
  api:
    check-reward:
      base-url: ${API_CHECK_REWARD_URL:http://10.4.10.231:8888/api/v1/rewards/fetch}
    check-pool-history:
      base-url: ${API_CHECK_POOL_HISTORY_URL:http://10.4.10.231:8888/api/v1/pool-history/fetch}
  token-logo-endpoint: ${TOKEN_LOGO_ENDPOINT:http://localhost:9001/}

kafka:
  configuration-enabled: ${KAFKA_CONFIGURATION_ENABLED:true}
  topics:
    reports:
      name: reports
      partitions: 1
      replicationFactor: 1
  admin:
    bootstrapServers: ${KAFKA_BOOSTRAP_SERVER_URL:localhost:9092}
    useSsl: ${KAFKA_USE_SSL:false}
  producers:
    json-producer:
      clientId: json-producer
      retries: 3
      bootstrapServers: ${KAFKA_BOOSTRAP_SERVER_URL:localhost:9092}
      maxInFlightRequestsPerConnection: 1
      requestTimeoutMs: 30000
      batchSize: 16384
      lingerMs: 5
      bufferMemory: 33554432
      acks: all
      enableIdempotence: true
      keySerializer: org.apache.kafka.common.serialization.StringSerializer
      valueSerializer: org.springframework.kafka.support.serializer.JsonSerializer
  consumers:
    json-consumer:
      clientId: json-consumer
      bootstrapServers: ${KAFKA_BOOSTRAP_SERVER_URL:localhost:9092}
      keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
      valueDeserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      autoOffsetReset: earliest
      enableAutoCommit: false
      autoCommitIntervalMs: 1000
      sessionTimeoutMs: 30000
      trustedPackages: "*"
      allowAutoCreateTopics: true
      concurrency: 6
      pollTimeout: 360000000
      groupId: ${KAFKA_GROUP_ID:mainnet}
  listeners:
    topics:
      reports: ${KAFKA_REPORTS_TOPIC:dev.explorer.api.mainnet.reports}

clouds:
  s3Configs:
    - beanName: reportS3
      profile: s3
      endpoint: ${REPORT_S3_STORAGE_ENDPOINT:http://localhost:9099}
      accessKey: ${REPORT_S3_ACCESS_KEY:minio_access_key}
      secretKey: ${REPORT_S3_SECRET_KEY:minio_secret_key}
      region: ${REPORT_S3_REGION:null}
      bucket: ${REPORT_S3_BUCKET_NAME:cardano-explorer-api-storage-report}
    - beanName: tokenLogosS3
      profile: s3
      endpoint: ${TOKEN_LOGO_S3_STORAGE_ENDPOINT:http://localhost:9099}
      accessKey: ${TOKEN_LOGO_S3_ACCESS_KEY:minio_access_key}
      secretKey: ${TOKEN_LOGO_S3_SECRET_KEY:minio_secret_key}
      region: ${TOKEN_LOGO_S3_REGION:null}
      bucket: ${TOKEN_LOGO_S3_BUCKET_NAME:cardano-explorer-api-storage-native-assets-logos}

logging:
  level:
    org.cardanofoundation: ${LOG:INFO}
    io.netty: ${LOG:INFO}
    reactor.netty: OFF
